import sys
import torch
from flask import Flask, request, jsonify, make_response
import numpy as np
import cv2
from PIL import Image
import io

# yolov5 경로 등록
sys.path.append('./yolov5')

# YOLO 관련 모듈 임포트
from models.common import DetectMultiBackend
from utils.general import non_max_suppression
from utils.torch_utils import select_device
from utils.augmentations import letterbox

app = Flask(__name__)

# 모델 경로 (custom_yolo_s_train 경로에 있는 best.pt 사용)
model_path = 'yolov5/runs/train/waste_v1_m_epoch50/weights/best.pt'

# 디바이스 설정 (GPU 있으면 CUDA 사용)
device = select_device('cuda' if torch.cuda.is_available() else 'cpu')

# 모델 로드
model = DetectMultiBackend(model_path, device=device)
model.eval()
stride, names, pt = model.stride, model.names, model.pt

# 추론 함수 (scale_coords 없이 처리)
def detect(image):
    img = letterbox(image, 640, stride=stride, auto=True)[0]
    img = img.transpose((2, 0, 1))[::-1]  # HWC to CHW
    img = np.ascontiguousarray(img)

    img_tensor = torch.from_numpy(img).to(device)
    img_tensor = img_tensor.float() / 255.0
    if img_tensor.ndimension() == 3:
        img_tensor = img_tensor.unsqueeze(0)

    pred = model(img_tensor, augment=False, visualize=False)
    pred = non_max_suppression(pred, conf_thres=0.65, iou_thres=0.45)

    results = []
    for det in pred:
        if len(det):
            for *xyxy, conf, cls in det:
                label = names[int(cls)]
                results.append({'label': label, 'confidence': float(conf)})

    # 정확도 기준으로 정렬
    results.sort(key=lambda x: x['confidence'], reverse=True)

    print("감지 결과:", results)

    return results


# API 엔드포인트
@app.route('/analyze', methods=['POST'])
def analyze():
    if 'image' not in request.files:
        return jsonify({'error': 'No image uploaded'}), 400

    file = request.files['image']
    image_bytes = file.read()
    image = Image.open(io.BytesIO(image_bytes)).convert('RGB')
    image = np.array(image)

    results = detect(image)

    # ✅ 응답 타입을 명시적으로 JSON으로 지정
    response = make_response(jsonify({'results': results}))
    response.headers['Content-Type'] = 'application/json'
    return response

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

